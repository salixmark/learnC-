bubblesort
首先是题目
**【问题描述】**
回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。**回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。**
本题希望通过回调函数，定义一个冒泡排序函数，可以根据函数指针指向不同的比较函数，分别实现从大到小和从小到大的排序。
希望通过这道题目，可以帮助大家理解函数指针与回调函数。本题较为简单，仅能处理整数的不同排序。
【输入形式】
无
【输出形式】
输出包括两行，分别为从小到大的输出和从大到小的输出。
main函数已给出

```cpp
int  main() 
{ 
        int  arr[]  =  {  1,  3,  5,  7,  9,  2,  4,  6,  8,  0  }; 
        int  i  =  0; 
        bubble(arr,    cmpGT); 
        for  (i  =  0;  i  <  10;  i++) 
        { 
                cout<<arr[i]<<"  "; 
        } 
        cout<<endl; 

        bubble(arr,    cmpLT); 
        for  (i  =  0;  i  <  10;  i++) 
        { 
                cout<<arr[i]<<"  "; 
        }         
        cout<<endl; 
        return  0; 
}
```


然后是代码

```cpp
#include  <iostream> 
#include  <cstring> 
using  namespace  std; 
int  cmpGT(const  int  *p1,  const  int  *p2) 
{ 
//实现两数比较，如果大于，则返回1，等于则返回0，小于则返回-1 

	if(*p1==*p2)
		return 0;
	else if(*p1>*p2)
		return 1;
	else
		return -1;
} 
int  cmpLT(const  int  *p1,  const  int  *p2) 
{ 
//实现两数比较，如果大于，则返回-1，等于则返回0，小于则返回1 
	if(*p1==*p2)
		return 0;
	else if(*p1>*p2)
		return -1;
	else
		return 1;
} 

void  swap(int  *p1,  int  *p2) 
{ 
//实现两个整形变量的值交换 
	int k;
	k=*p1;
	*p1=*p2;
	*p2=k;
} 
void  bubble(int  *base,    int(*cmp)(const  int  *,  const  int  *)) //**回调函数**（概念mark一下）
{ 
//冒泡排序
	int j,i;
	for(i=0;i<10-1;i++)//相邻两两之间比较然后按条件交换（外循环是总长度-1）
		for(j=0;j<10-1-i;j++)//j的次数注意是总长度-i-1
		{
			if(cmp(base+j,base+j+1)==1)//比较
				swap(base+j,base+j+1);//交换
		}
} 
```
总结：主要是冒泡用的少都快忘了，一直比较习惯用的是选择排序，所以特意标记一下。
本题很简单，但是不知道老师为什么给<cstring>，题目设置根本用不到。
然后运行的时候发现不同的ide的结果不一样，懵逼了好久，看来还是要习惯用vs才行。