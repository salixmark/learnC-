
bookmanage1
首先是题目
****【问题描述】****
请设计一个程序实现图书库存的管理。请根据给定的main函数及程序输出，完成设计。具体要求如下。
一、请设计一个Book类：
1、包括私有成员：
    unsigned int m_ID;//编号
    string m_Name;//书名
    string m_Introductio//简介
    string m_Author;//作者
    string m_Date;//日期
    unsigned int m_Page;//页数
2、设计所有成员变量的getter和setter函数，关于getter和setter，我们在多文件视频课程中已经进行了介绍，同学们也可以百度了解。
3、设计构造与析构函数，不要求输出信息，但各位同学可以自己输出并分析各个对象的创建与删除的情况：
Book();//将m_ID初始化为0，表示这个一个未赋值对象
    virtual ~Book();//无具体的工作
    Book(const Book& other);//实现所有成员变量的拷贝
    下面是Book类的定义和实现
```cpp
    class Book
 {
        unsigned int m_ID;//编号
        string m_Name;//书名
        string m_Introduction;//简介
        string m_Author;//作者
        string m_Date;//日期
        unsigned int m_Page;//页数
    public://下方为所有私有成员的getter和setter函数，因为很简单，所以就直接写了
         int GetID() { return m_ID; }
         void SetID(unsigned int id) { m_ID = id; }
         string GetName() { return m_Name; }
         void SetName(string name) { m_Name = name; }
         string GetIntroduction() { return m_Introductio; }
         void SetIntroduction(string intro) { m_Introductio = intro; }
         string GetAuthor() { return m_Author; }
         void  SetAuthor(string auth) { m_Author = auth; }
         string GetDate() { return m_Date; }
         void SetDate(string date) { m_Date = date; }
         int GetPage() { return m_Page; }
         void SetPage(unsigned int page) { m_Page = page; }
         Book() { m_ID = 0; }//构造函数，根据题目m_ID为0
         ~Book();//析构函数
         Book(const Book& other);//拷贝构造函数
         friend class Store;//友元，不然后面无法调用Book类的私有成员
 };
Book::~Book()//析构函数需要实现部分！
{

}
Book::Book(const Book& other)//拷贝构造，本来是可以不用写的，系统会调用默认的拷贝构造，但是题目要求，只能写了
{
    m_ID = other.m_ID;
    m_Name = other.m_Name;
    m_Introductio = other.m_Introductio;
    m_Author = other.m_Author;
    m_Date = other.m_Date;
    m_Page = other.m_Page;
}
```
    
二、请设计一个Store类,这是一个动态数组类，用于实现图书的管理：
1、包括私有成员：
    Book *m_pBook;//指向利用new操作动态创建的Book数组
    unsigned int m_Count;//表示库存中图书的数量
2、设计m_Count成员变量的getter和setter函数。
3、设计构造与析构函数
   1） Store();
   将 m_Count置为0，m_pBook置为空指针;并输出"Store default constructor called!"
   2）Store(int n);
   将m_Count置为n;利用new创建大小为n的数组，令m_pBook指向数组;并输出"Store constructor with (int n) called!";
   3）virtual ~Store();
   将m_Count置为0;判断如果m_pBook不为空指针，释放m_pBook指向空间;并输出"Store destructor called!";
   4）Store(const Store& other);
   实现对象数组的深拷贝，并输出"Store copy constructor called!";
4、设计入库操作
   入库操作的主要功能是在数组中添加一本新书。
   函数声明为：void in(Book &b)
   注意因为入库了一本新书，所以需要增加一个存储空间。提示：可以通过新申请一个空间，并将原有数据拷贝进新空间，同时将新增的书放在数组最后一个元素，再释放原有空间，从而实现数组大小的动态调整。
5、设计出库操作
   出库操作的主要功能是根据指定的书名，在数组中删除这本书。
   函数声明为：void out(string name)
   注意因为删除了一本书，所以需要减少一个存储空间。提示：可以通过新申请一个空间，并将未被删除的部分拷贝进新空间，再释放原有空间，从而实现数组大小的动态调整。
6、根据ID查找图书
   要求根据给定的ID查找图书，如果找到，则返回一个Book对象，Book对象中存储了对应书本的信息；如果找不到，则返回一个Book对象，Book对象的m_ID为0，表示未被初始化。
   函数声明为：Book findbyID(int ID)
7、根据name查找图书
   要求根据给定的书名查找图书，如果找到，则返回一个Book对象，Book对象中存储了对应书本的信息；如果找不到，则返回一个Book对象，Book对象的m_ID为0，表示未被初始化
   函数声明为：Book findbyName(string name)
8、设计一个函数打印所有的图书的信息
   函数声明为：void printList()

下面是Store类的定义和实现

```cpp
   class Store
{
    Book* m_pBook;//指向利用new操作动态创建的Book数组
    unsigned int m_Count;//表示库存中图书的数量
public://首先是私有成员m_Count的getter和setter函数
    int GetCount() { return m_Count; }
    void SetCount(int count) { m_Count = count; }
    Store();//无参构造函数
    Store(int n);//含参构造
    ~Store();//析构函数
    Store(const Store& other);//拷贝构造
    void in(Book& b);//入库
    void out(string name);//出库
    Book findbyID(int ID);//按ID查找
    Book findbyName(string name);//按书名查找
    void printList();//打印库中图书
};
Store::Store()
{
    m_pBook = NULL;
    m_Count = 0; 
    cout << "Store default constructor called!" << endl; 
}// 将 m_Count置为0，m_pBook置为空指针;并输出"Store default constructor called!"
Store::Store(int n) 
{ 
    m_Count = n; 
    cout << "Store constructor with (int n) called!" << endl; 
    m_pBook = new Book[n];
}//将m_Count置为n;利用new创建大小为n的数组，令m_pBook指向数组;并输出"Store constructor with (int n) called!"
 Store::~Store()
{
    m_Count = 0;
    if (m_pBook)
    {
        delete[] m_pBook;//删除动态数组内存
        cout << "Store destructor called!" << endl;
    }
}//将m_Count置为0; 判断如果m_pBook不为空指针，释放m_pBook指向空间; 并输出"Store destructor called!"
Store::Store(const Store& other)
{
    m_Count = other.m_Count;
    m_pBook = new Book[m_Count];//将m_Count的值更新，并且新申请一个动态数组，并使指针指向它
    for (int i = 0; i < m_Count; i++)
    {
       m_pBook[i]=other.m_pBook[i];//直接赋值即可
    }
    cout << "Store copy constructor called!" << endl;
}//实现对象数组的深拷贝，并输出"Store copy constructor called!"
void Store::in(Book& b)
{
    Book* newb = new Book[m_Count + 1];
    for (int i = 0; i < m_Count; i++)
    {
        newb[i]=m_pBook[i];
    }
    newb[m_Count]=b;
    delete[] m_pBook;
    m_pBook = newb;
    m_Count++;//入库时计数要加一
}//通过新申请一个空间，并将原有数据拷贝进新空间，同时将新增的书放在数组最后一个元素，再释放原有空间，从而实现数组大小的动态调整
void Store::out(string name)
{
    Book* newb = new Book[m_Count - 1];
    int c = 0,j;
    for (int i = 0; i < m_Count;i++)
    {
        if (m_pBook[i].m_Name == name)
        {
            c++;
            continue;
        }
        if (c)
        {
            j = i;
            newb[--j]=m_pBook[i];
        }
        else
            newb[i]=m_pBook[i];
    }
    delete[] m_pBook;
    m_pBook = newb;
    m_Count--;//出库时计数要减一
}//通过新申请一个空间，并将未被删除的部分拷贝进新空间，再释放原有空间，从而实现数组大小的动态调整
Book Store::findbyID(int ID)
{
    for (int i = 0; i < m_Count; i++)
    {
        if (m_pBook[i].m_ID == ID)
            return m_pBook[i];
    }
    Book k;//调用无参构造函数
    return k;
}//根据给定的ID查找图书，如果找到，则返回一个Book对象，Book对象中存储了对应书本的信息；如果找不到，则返回一个Book对象，Book对象的m_ID为0，表示未被初始化
Book Store::findbyName(string name)
{
    for(int i = 0; i < m_Count; i++)
    {
        if (m_pBook[i].m_Name == name)
            return m_pBook[i];
    }
    Book k;
    return k;
}//根据给定的书名查找图书，如果找到，则返回一个Book对象，Book对象中存储了对应书本的信息；如果找不到，则返回一个Book对象，Book对象的m_ID为0，表示未被初始化
void Store::printList()
{
    cout << "There are totally " << m_Count << " Books:" << endl;
    for (int i = 0; i < m_Count; i++)
        cout << "ID=" << m_pBook[i].m_ID << ";  Name:" << m_pBook[i].m_Name << ";  Author:" << m_pBook[i].m_Author << ";  Date:" << m_pBook[i].m_Date<<";"<< endl;
}//打印所有的图书的信息
```

然后是main函数代码（老师已给出）

```cpp
#include <iostream>
using namespace std;
int  main()
{
    Store  s;
    Book  b1, b2, b3;
    b1.SetID(1);
    b1.SetName("C++  语言程序设计(第4版)");
    b1.SetAuthor("郑莉");
    b1.SetIntroduction("介绍C++及面向对象的知识");
    b1.SetDate("201007");
    b1.SetPage(529);
    b2.SetID(2);
    b2.SetName("离散数学");
    b2.SetAuthor("左孝凌");
    b2.SetIntroduction("介绍命题逻辑、谓词逻辑、集合论、代数系统和图论");
    b2.SetDate("198209");
    b2.SetPage(305);
    b3.SetID(3);
    b3.SetName("c程序设计");
    b3.SetAuthor("谭浩强");
    b3.SetIntroduction("介绍C程序设计中的基本知识，如语句格式、语法等");
    b3.SetDate("201006");
    b3.SetPage(355);

    cout << "第一本书入库" << endl;
    s.in(b1);
    cout << "第二本书入库" << endl;
    s.in(b2);
    cout << "第三本书入库" << endl;
    s.in(b3);
    cout << "现有库存书籍数量：" << s.GetCount() << endl;
    cout << "查找并出库图书：离散数学" << endl;
    Book  tmpbook = s.findbyName("离散数学");
    if (tmpbook.GetID() != 0)
    {
        s.out("离散数学");
        cout << "离散数学  已成功出库" << endl;
    }
    else
        cout << "没有找到name为离散数学的书" << endl;
    cout << "现有库存书籍数量：" << s.GetCount() << endl;

    cout << "查找图书  ID：3" << endl;
    tmpbook = s.findbyID(3);
    if (tmpbook.GetID() != 0)
        cout << "找到ID为" << 3 << "的书，书名：" << tmpbook.GetName() << endl;
    else
        cout << "没有找到ID为" << 3 << "的书" << endl;

    cout << "查找图书  name：离散数学" << endl;
    tmpbook = s.findbyName("离散数学");
    if (tmpbook.GetID() != 0)
        cout << "找到name为离散数学的书，ID：" << tmpbook.GetID() << endl;
    else
        cout << "没有找到name为离散数学的书" << endl;

    cout << "输出所有库存图书的信息" << endl;
    s.printList();
    cout << "程序运行结束" << endl;
    return  0;
}
```
总结：这道题写了好长时间，有些操作比如m_pBook[i]=other.m_pBook[i]一开始不是很确定能不能这么做，反正不确定就百度，所以 一道题花了好长时间，但是对类的理解加深了，后面还有一道题几乎一样但是要求用vector创建数组。