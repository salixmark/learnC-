
oilbuket
【问题描述】声明一个表示时间的类CTime，可以精确表示年、月、日、小时、分、秒，请计算两个日期对象之间相隔的天数。
#include<iostream>
#include<cmath>
using namespace std;
int smonth[13]={0,31,0,31,30,31,30,31,31,30,31,30,31};//定义一个包含每月天数的函数，2月看情况
int sen(int year)//判断闰年的函数
{
	if((year%4==0&&year%100)||year%400==0)
		return 1;//闰年
	else
		return 0;
}
class CTime//类
{
   public:
	   CTime(int year0,int month0,int day0,int hour0=0,int min0=0,int sec0=0);
	   //构造函数并且设置默认值
	   CTime(CTime &p);//拷贝构造函数
	   ~CTime();//析构函数
	   int dayDiff(CTime t);//计算天数的函数
	   void  showTime();//表示日期的函数
	   int isvalid();
	   //判断是否合法（说实话我觉得老师这个函数的定义有点多余，而且题目里没有声明，坑死我了）
   private:
	   int month,year,day,hour,min,sec;
};
CTime::CTime(int year0,int month0,int day0,int hour0,int min0,int sec0)//构造函数
{
    if(sen(year0))//特判闰年
	{
		smonth[2]=29;
		if(day0<0||day0>smonth[month0])//判断日期是否违法
		{
			cout<<"date error!"<<endl;
			year=0;
			month=0;
			day=0;
			hour=0;
			sec=0;
			min=0;
		}
		else if(min0>59||hour0>23||sec0>59)
		//判断时间是否违法（分开判断因为输出不同）
		{
			cout<<"time error!"<<endl;
			year=0;
		    month=0;
		    day=0;
			hour=0;
			sec=0;
			min=0;
		}
		else//合法情况
		{
			year=year0;
			month=month0;
			day=day0;
			hour=hour0;
			sec=sec0;
			min=min0;
		}
	}
	else//这是不是闰年的时候
	{
		smonth[2]=28;
		if(day0<0||day0>smonth[month0])
		{
			cout<<"date error!"<<endl;
			year=0;
		    month=0;
		    day=0;
			hour=0;
			sec=0;
			min=0;
		}
	    else if(min0>59||hour0>23||sec0>59)
		{
			cout<<"time error!"<<endl;
			year=0;
		    month=0;
		    day=0;
			hour=0;
			sec=0;
			min=0;
		}
		else
		{
			year=year0;
			month=month0;
			day=day0;
			hour=hour0;
			sec=sec0;
			min=min0;
		}
	}
	cout<<"构造函数被调用"<<endl;
}
CTime::CTime(CTime &p)//拷贝构造函数
{
	year=p.year;
	month=p.month;
	day=p.day;
	hour=p.hour;
	min=p.min;
	sec=p.sec;
	cout<<"拷贝构造函数被调用"<<endl;
}
CTime::~CTime()
{
	cout<<"析构函数被调用"<<endl;
}
int CTime::isvalid()
{
	int i=0;
    if(sen(year)&&year!=0)//特判闰年
	{
		smonth[2]=29;
		if(day<0||day>smonth[month]||min>59||hour>23||sec>59)//日期和时间违规（根据题目这里不需要输出XD）
		{
			year=0;
			month=0;
			day=0;
			hour=0;
			sec=0;
			min=0;
		}
		else
			i=1;
	}
	else if(sen(year)==0&&year!=0)
	{
		smonth[2]=28;
		if(day<0||day>smonth[month]||min>59||hour>23||sec>59)
		{
			year=0;
		    month=0;
		    day=0;
			hour=0;
			sec=0;
			min=0;
		}
		else
			i=1;
	}
	return i;
}
int CTime::dayDiff(CTime t)
{
	int dayoff=0,i,year1=t.year,j=t.month,day1=t.day,month1=t.month;
	if(year<year1)//对象年大时
	{
		for(i=year+1;i<year1;i++)//年差
		{
			if(sen(i))
				dayoff+=366;
			else
				dayoff+=365;
		}
		if(sen(year))//判断闰年 修改2月天数
			smonth[2]=29;
		else
			smonth[2]=28;
		dayoff+=smonth[month]-day;//较小年要加上当前月还剩的天数
		for(i=month+1;i<13;i++)//计算完整月天数差
		{
			dayoff+=smonth[i];
		}//year计算结束
		//开始计算year1
		dayoff+=day1;//因为要加上当前日期所以不需要判断2月（下同上）
		if(sen(year1))
			smonth[2]=29;
		else
			smonth[2]=28;
		for(i=month1-1;i>0;i--)
		{
			dayoff+=smonth[i];
		}
	}
	else if(year>year1)//对象年小
	{
		for(i=year1+1;i<year;i++)//年差
		{
			if(sen(i))
				dayoff+=366;
			else
				dayoff+=365;
		}
	    if(sen(year1))
			smonth[2]=29;
		else
			smonth[2]=28;
		dayoff+=smonth[month1]-day1;//对象年
		for(i=month1+1;i<13;i++)
		{
			dayoff+=smonth[i];
		}
		if(sen(year))
			smonth[2]=29;
		else
			smonth[2]=28;
		for(i=month-1;i>0;i--)
		{
			dayoff+=smonth[i];
		}
		dayoff+=day;//当前年
	}
	else
	//同年
	{
		if(sen(year))
			smonth[2]=29;
		else
			smonth[2]=28;
		if(month<month1)//对象月大
		{
			for(i=month+1;i<month1;i++)
			{
				dayoff+=smonth[i];
			}
			dayoff+=day1+smonth[month]-day;
		}
		else if(month>month1)//对象月小
		{
			for(i=month1+1;i<month;i++)
			{
				dayoff+=smonth[i];
			}
			dayoff+=day+smonth[month1]-day1;
		}
		else//同月
			dayoff+=abs(day-day1);
	}
	return dayoff;
}
void CTime::showTime()
{
	cout<<year<<"/"<<month<<"/"<<day<<" "<<hour<<":"<<min<<":"<<sec<<endl;
}
int  main() 
{ 
        int  year,  month,  day,  hour,  minute,  second; 
        cin  >>  year  >>  month  >>  day  >>  hour  >>  minute  >>  second; 
        CTime  t1(year,  month,  day,  hour,  minute,  second); 
        t1.showTime(); 
        CTime  t2(2000,  1,  1);  //利用默认形参将时间初始化为00:00:00 
        if  (t1.isvalid())          //如果日期和时间合法，则计算天数 
        { 
                int  days=0; 
                days=t1.dayDiff(t2); 
                cout  <<  "这两天之间相隔了"  <<  days  <<  "天"  <<  endl; 
                days=t2.dayDiff(t1); 
                cout  <<  "这两天之间相隔了"  <<  days  <<  "天"  <<  endl; 
        } 
	return 0;
}
